/**
 * ============================================================================
 * WEBGPU RENDER ENGINE - STAGE 2
 * ============================================================================
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É GPU-—É—Å–∫–æ—Ä–µ–Ω–∏—è –¥–ª—è
 * –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ CPU –¥–ª—è
 * –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ
 * –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
 * 
 * –§–∏–ª–æ—Å–æ—Ñ–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
 * 
 * –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –∫–∞–∫ —Ö—É–¥–æ–∂–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π
 * —Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω—É –ø–∏–∫—Å–µ–ª—å –∑–∞ –ø–∏–∫—Å–µ–ª–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ
 * –º–µ–¥–ª–µ–Ω–Ω–æ. GPU-–ø–æ–¥—Ö–æ–¥ –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–æ, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —É –≤–∞—Å –±—ã–ª–∞ –∞—Ä–º–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤,
 * –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∏—Å—É–µ—Ç —Å–≤–æ–π –ø–∏–∫—Å–µ–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ö–∞—Ä—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
 * –≤ —Ç—ã—Å—è—á–∏ —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ.
 * 
 * –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 * 
 * 1. WebGPUContext - –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π GPU –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
 * 2. ComputeShader - –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ GPU (—á–∞—Å—Ç–∏—Ü—ã, —Ñ–∏–∑–∏–∫–∞, –¥–∞–Ω–Ω—ã–µ)
 * 3. RenderPipeline - –†–∏—Å—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
 * 4. ProceduralBackground - –ñ–∏–≤–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω
 * 5. BlurEffect - GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è glassmorphism —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MicroISA:
 * 
 * –ö–∞–∂–¥–∞—è GPU-–æ–ø–µ—Ä–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –Ω–∞—à–µ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π
 * –º–∞—à–∏–Ω–µ. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –∏–∑–º–µ—Ä—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
 * GPU vs CPU –ø–æ–¥—Ö–æ–¥—ã, –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
 */

/**
 * –ö–ª–∞—Å—Å WebGPUContext —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º GPU-—Ä–µ—Å—É—Ä—Å–æ–≤.
 * 
 * –≠—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –≤—Å–µ—Ö GPU-–æ–ø–µ—Ä–∞—Ü–∏–π. –î—É–º–∞–π—Ç–µ –æ –Ω—ë–º –∫–∞–∫ –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ,
 * –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã —É –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—ã–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
 * (–ø–∞–º—è—Ç—å –Ω–∞ GPU, —Ç–µ–∫—Å—Ç—É—Ä—ã, –±—É—Ñ–µ—Ä—ã), –∏ —á—Ç–æ–±—ã —ç—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—á–∏—â–∞–ª–∏—Å—å
 * –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏.
 * 
 * –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ: GPU –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å, –∏ –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å
 * —Ä–µ—Å—É—Ä—Å—ã –±–µ–∑ –∏—Ö –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è, –º—ã –±—ã—Å—Ç—Ä–æ –∏—Å—á–µ—Ä–ø–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å –∏
 * –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–¥—ë—Ç. –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ.
 */
class WebGPUContext {
    constructor() {
        // GPU-–∞–¥–∞–ø—Ç–µ—Ä - —ç—Ç–æ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
        // –ú–æ–∂–Ω–æ –¥—É–º–∞—Ç—å –æ –Ω—ë–º –∫–∞–∫ –æ "–¥—Ä–∞–π–≤–µ—Ä–µ" –¥–ª—è GPU
        this.adapter = null;
        
        // Device - —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ GPU –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        // –ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –º—ã —Å–æ–∑–¥–∞—ë–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        this.device = null;
        
        // Context —Å–≤—è–∑—ã–≤–∞–µ—Ç GPU —Å canvas —ç–ª–µ–º–µ–Ω—Ç–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        // –≠—Ç–æ "–æ–∫–Ω–æ", —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ GPU —Ä–∏—Å—É–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω
        this.context = null;
        
        // Canvas —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º—ã –±—É–¥–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å
        this.canvas = null;
        
        // –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        // –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –ø–∏–∫—Å–µ–ª–∏ –∫–æ–¥–∏—Ä—É—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏
        this.preferredFormat = null;
        
        // –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ - true –∫–æ–≥–¥–∞ –≤—Å—ë –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        this.isReady = false;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        this.stats = {
            totalComputePasses: 0,    // –°–∫–æ–ª—å–∫–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ö–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            totalRenderPasses: 0,     // –°–∫–æ–ª—å–∫–æ —Ä–µ–Ω–¥–µ—Ä-–ø—Ä–æ—Ö–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            gpuMemoryUsed: 0,         // –°–∫–æ–ª—å–∫–æ GPU-–ø–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            lastFrameTime: 0          // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞
        };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç WebGPU –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã.
     * 
     * –≠—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ—Ç–æ–º—É —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø
     * –∫ GPU, —á—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏—Ç–µ
     * —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω
     * –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ, –∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–¥–µ–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã.
     * 
     * @param {HTMLCanvasElement} canvas - –≠–ª–µ–º–µ–Ω—Ç canvas –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
     */
    async initialize(canvas) {
        console.log('üé® Initializing WebGPU Render Engine...');
        
        this.canvas = canvas;
        
        try {
            // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä WebGPU
            // –ù–µ –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —ç—Ç–æ API, –æ—Å–æ–±–µ–Ω–Ω–æ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏
            if (!navigator.gpu) {
                console.warn('‚ùå WebGPU is not supported in this browser');
                return false;
            }
            
            // –®–∞–≥ 2: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä GPU
            // –≠—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –¥–æ–ª–∂–µ–Ω
            // –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ GPU –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π
            this.adapter = await navigator.gpu.requestAdapter({
                powerPreference: 'high-performance' // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –¥–∏—Å–∫—Ä–µ—Ç–Ω—É—é GPU
            });
            
            if (!this.adapter) {
                console.warn('‚ùå Failed to get GPU adapter');
                return false;
            }
            
            console.log('‚úì GPU adapter acquired:', this.adapter);
            
            // –®–∞–≥ 3: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - —ç—Ç–æ –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å GPU
            // –ú—ã –º–æ–∂–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (features) –∏ –ª–∏–º–∏—Ç—ã
            this.device = await this.adapter.requestDevice({
                // –ó–¥–µ—Å—å –º—ã –º–æ–≥–ª–∏ –±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç—É—Ä –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                // –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –±—É—Ñ–µ—Ä–æ–≤
            });
            
            if (!this.device) {
                console.warn('‚ùå Failed to get GPU device');
                return false;
            }
            
            console.log('‚úì GPU device acquired');
            
            // –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas –¥–ª—è WebGPU
            // –≠—Ç–æ —Å–≤—è–∑—ã–≤–∞–µ—Ç –Ω–∞—à canvas —ç–ª–µ–º–µ–Ω—Ç —Å GPU
            this.context = this.canvas.getContext('webgpu');
            
            if (!this.context) {
                console.warn('‚ùå Failed to get WebGPU context');
                return false;
            }
            
            // –®–∞–≥ 5: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã
            // –†–∞–∑–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –º–æ–≥—É—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç BGRA –≤–º–µ—Å—Ç–æ RGBA
            this.preferredFormat = navigator.gpu.getPreferredCanvasFormat();
            
            // –®–∞–≥ 6: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            // –≠—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç GPU, –∫–∞–∫ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å canvas
            this.context.configure({
                device: this.device,
                format: this.preferredFormat,
                // alphaMode –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                // 'premultiplied' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ü–≤–µ—Ç–∞ —É–º–Ω–æ–∂–µ–Ω—ã –Ω–∞ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
                // –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥–∞ –≤ –≤–µ–±
                alphaMode: 'premultiplied'
            });
            
            console.log('‚úì WebGPU context configured');
            console.log('  Format:', this.preferredFormat);
            console.log('  Canvas size:', canvas.width, 'x', canvas.height);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - GPU-–æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å
            // —Å–ª–æ–∂–Ω—ã–º–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            this.device.addEventListener('uncapturederror', (event) => {
                console.error('‚ùå WebGPU uncaptured error:', event.error);
            });
            
            this.isReady = true;
            console.log('‚úì WebGPU Render Engine ready!');
            
            return true;
            
        } catch (error) {
            console.error('‚ùå WebGPU initialization failed:', error);
            return false;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –±—É—Ñ–µ—Ä –Ω–∞ GPU –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
     * 
     * –ë—É—Ñ–µ—Ä - —ç—Ç–æ –±–ª–æ–∫ –ø–∞–º—è—Ç–∏ –Ω–∞ GPU. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π
     * –ø–∞–º—è—Ç–∏, –Ω–æ –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –Ω–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ. –ú—ã –º–æ–∂–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ
     * —Å CPU –∏ —á–∏—Ç–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è
     * GPU-–ø—Ä–æ–≥—Ä–∞–º–º (—à–µ–π–¥–µ—Ä–æ–≤).
     * 
     * @param {ArrayBuffer|TypedArray} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±—É—Ñ–µ—Ä
     * @param {number} usage - –§–ª–∞–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—É—Ñ–µ—Ä–∞
     * @returns {GPUBuffer} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
     */
    createBuffer(data, usage) {
        // –°–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        const buffer = this.device.createBuffer({
            size: data.byteLength,
            usage: usage,
            // mappedAtCreation –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            // –≠—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—É—Ñ–µ—Ä –∏ –ø–æ—Ç–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –Ω–µ–≥–æ
            mappedAtCreation: true
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∞–º—è—Ç–∏ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
        const arrayBuffer = buffer.getMappedRange();
        
        // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—à–µ–≥–æ JavaScript –º–∞—Å—Å–∏–≤–∞ –≤ GPU-–ø–∞–º—è—Ç—å
        // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TypedArray –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        if (data instanceof Float32Array) {
            new Float32Array(arrayBuffer).set(data);
        } else if (data instanceof Uint32Array) {
            new Uint32Array(arrayBuffer).set(data);
        } else {
            new Uint8Array(arrayBuffer).set(new Uint8Array(data));
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º mapping - —Ç–µ–ø–µ—Ä—å –±—É—Ñ–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è GPU
        buffer.unmap();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        this.stats.gpuMemoryUsed += data.byteLength;
        
        return buffer;
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç—É—Ä—É –Ω–∞ GPU.
     * 
     * –¢–µ–∫—Å—Ç—É—Ä–∞ - —ç—Ç–æ –¥–≤—É–º–µ—Ä–Ω—ã–π (–∏–ª–∏ —Ç—Ä—ë—Ö–º–µ—Ä–Ω—ã–π) –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ GPU.
     * –ß–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–æ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å
     * –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ - –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏–ª–∏ –∫–∞—Ä—Ç—ã –≤—ã—Å–æ—Ç –¥–ª—è
     * –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
     * 
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã
     * @param {number} height - –í—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã
     * @param {string} format - –§–æ—Ä–º–∞—Ç –ø–∏–∫—Å–µ–ª–µ–π
     * @param {number} usage - –§–ª–∞–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     * @returns {GPUTexture} - –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
     */
    createTexture(width, height, format = this.preferredFormat, usage) {
        const texture = this.device.createTexture({
            size: { width, height, depthOrArrayLayers: 1 },
            format: format,
            usage: usage
        });
        
        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–∞–º—è—Ç–∏
        // –î–ª—è RGBA8 –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç 4 –±–∞–π—Ç–∞
        const bytesPerPixel = 4;
        this.stats.gpuMemoryUsed += width * height * bytesPerPixel;
        
        return texture;
    }
    
    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –∫–∞–¥—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
     * 
     * –≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç command encoder - –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è GPU.
     * –î—É–º–∞–π—Ç–µ –æ –Ω—ë–º –∫–∞–∫ –æ —Å–ø–∏—Å–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã GPU –≤—ã–ø–æ–ª–Ω–∏–ª.
     * –ú—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∞ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º.
     * –≠—Ç–æ –≥–æ—Ä–∞–∑–¥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ.
     * 
     * @returns {GPUCommandEncoder} - –≠–Ω–∫–æ–¥–µ—Ä –∫–æ–º–∞–Ω–¥
     */
    beginFrame() {
        this.stats.lastFrameTime = performance.now();
        
        return this.device.createCommandEncoder({
            label: 'Frame Command Encoder'
        });
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–∞–¥—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ GPU –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     * 
     * –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç - –º—ã –±–µ—Ä—ë–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏,
     * –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –Ω–∞ GPU. GPU –≤—ã–ø–æ–ª–Ω–∏—Ç –∏—Ö –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
     * (–∏–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ), –∏ –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     * –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
     * 
     * @param {GPUCommandEncoder} encoder - –≠–Ω–∫–æ–¥–µ—Ä —Å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
     */
    submitFrame(encoder) {
        // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω–∫–æ–¥–µ—Ä - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ command buffer
        const commandBuffer = encoder.finish();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º command buffer –≤ –æ—á–µ—Ä–µ–¥—å GPU –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        // –û—á–µ—Ä–µ–¥—å (queue) - —ç—Ç–æ –∫–∞–∫ –∫–æ–Ω–≤–µ–π–µ—Ä –Ω–∞ –∑–∞–≤–æ–¥–µ, –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
        // –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        this.device.queue.submit([commandBuffer]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const frameTime = performance.now() - this.stats.lastFrameTime;
        
        // –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∫–∞–¥—Ä –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        // 16.67–º—Å = 60 FPS, –µ—Å–ª–∏ –º—ã –¥–æ–ª—å—à–µ, –∑–Ω–∞—á–∏—Ç –ø–∞–¥–∞–µ–º –Ω–∏–∂–µ 60 FPS
        if (frameTime > 16.67) {
            console.warn(`‚ö†Ô∏è Slow frame: ${frameTime.toFixed(2)}ms`);
        }
    }
    
    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä canvas –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç GPU-—Ä–µ—Å—É—Ä—Å—ã.
     * 
     * –ö–æ–≥–¥–∞ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –º–µ–Ω—è–µ—Ç—Å—è, –Ω–∞–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å canvas
     * –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ GPU-—Ä–µ—Å—É—Ä—Å—ã. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã
     * —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ–≥–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –æ–∫–Ω–∞.
     * 
     * @param {number} width - –ù–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞
     * @param {number} height - –ù–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞
     */
    resize(width, height) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä canvas
        this.canvas.width = width;
        this.canvas.height = height;
        
        console.log(`üîÑ Canvas resized to ${width}x${height}`);
        
        // –¢–µ–∫—Å—Ç—É—Ä—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ canvas, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
        // –≠—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É GPU –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏.
     */
    getStats() {
        return {
            ...this.stats,
            isReady: this.isReady,
            deviceLimits: this.device ? {
                maxBufferSize: this.device.limits.maxBufferSize,
                maxTextureSize: this.device.limits.maxTextureDimension2D
            } : null
        };
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ GPU-—Ä–µ—Å—É—Ä—Å—ã.
     * 
     * –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏.
     * –ö–æ–≥–¥–∞ –º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å GPU, –º—ã –¥–æ–ª–∂–Ω—ã —è–≤–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å
     * –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ–Ω–∏ –±—É–¥—É—Ç
     * –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—É—é GPU-–ø–∞–º—è—Ç—å.
     */
    destroy() {
        if (this.device) {
            this.device.destroy();
            this.device = null;
        }
        
        this.adapter = null;
        this.context = null;
        this.isReady = false;
        
        console.log('‚úì WebGPU context destroyed');
    }
}

/**
 * ============================================================================
 * PROCEDURAL BACKGROUND GENERATOR
 * ============================================================================
 * 
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞—ë—Ç –∂–∏–≤–æ–π, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
 * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –º—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ
 * —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä—è–º–æ –Ω–∞ GPU.
 * 
 * –ö–æ–Ω—Ü–µ–ø—Ü–∏—è: –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º compute shader –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü –∏–ª–∏ –≤–æ–ª–Ω.
 * –ö–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å —Ñ–æ–Ω–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –Ω–∞ GPU, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç
 * —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU.
 * 
 * –ü—Ä–∏–º–µ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:
 * - –í–æ–ª–Ω—ã, —Ä–∞—Å—Ö–æ–¥—è—â–∏–µ—Å—è –æ—Ç —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
 * - –ß–∞—Å—Ç–∏—Ü—ã, –ø—Ä–∏—Ç—è–≥–∏–≤–∞—é—â–∏–µ—Å—è –∫ –∫—É—Ä—Å–æ—Ä—É
 * - –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π —à—É–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 * - –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
 */
class ProceduralBackground {
    constructor(gpuContext, microISAVM = null) {
        this.gpu = gpuContext;
        this.vm = microISAVM; // –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        this.params = {
            time: 0,              // –í—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            mouseX: 0.5,          // –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è 0-1)
            mouseY: 0.5,
            clickX: 0.5,          // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫
            clickY: 0.5,
            waveIntensity: 0,     // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–æ–ª–Ω—ã –æ—Ç –∫–ª–∏–∫–∞
            colorShift: 0         // –°–¥–≤–∏–≥ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        };
        
        // GPU-—Ä–µ—Å—É—Ä—Å—ã
        this.renderPipeline = null;
        this.uniformBuffer = null;
        this.bindGroup = null;
        
        // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.initialized = false;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞.
     * 
     * –ü–∞–π–ø–ª–∞–π–Ω - —ç—Ç–æ –∫–∞–∫ –∫–æ–Ω–≤–µ–π–µ—Ä –Ω–∞ –∑–∞–≤–æ–¥–µ. –ú—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     * –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ GPU –≤—ã–ø–æ–ª–Ω–∏—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è. –í —Å–ª—É—á–∞–µ —Ñ–æ–Ω–∞
     * —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ vertex shader (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞,
     * –ø–æ–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω) –∏ fragment shader (–≤—ã—á–∏—Å–ª—è–µ—Ç —Ü–≤–µ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è).
     */
    async initialize() {
        console.log('üé® Initializing Procedural Background...');
        
        try {
            // –°–æ–∑–¥–∞—ë–º uniform buffer –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
            // Uniform buffer - —ç—Ç–æ –±—É—Ñ–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã –¥–ª—è –≤—Å–µ—Ö
            // –ø–∏–∫—Å–µ–ª–µ–π –≤ –æ–¥–Ω–æ–º –∫–∞–¥—Ä–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è –º—ã—à–∏.
            // –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 16 –±–∞–π—Ç–∞–º (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ WebGPU)
            const uniformBufferSize = 64; // 16 floats = 64 bytes
            
            this.uniformBuffer = this.gpu.createBuffer(
                new Float32Array(uniformBufferSize / 4),
                GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
            );
            
            // –°–æ–∑–¥–∞—ë–º shader module
            // –®–µ–π–¥–µ—Ä - —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ GPU
            // –ù–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ WGSL (WebGPU Shading Language)
            const shaderModule = this.gpu.device.createShaderModule({
                label: 'Procedural Background Shader',
                code: this.getShaderCode()
            });
            
            // –°–æ–∑–¥–∞—ë–º render pipeline
            // –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
            this.renderPipeline = this.gpu.device.createRenderPipeline({
                label: 'Procedural Background Pipeline',
                layout: 'auto', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å layout –∏–∑ —à–µ–π–¥–µ—Ä–∞
                
                // Vertex stage - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä—à–∏–Ω—ã
                vertex: {
                    module: shaderModule,
                    entryPoint: 'vertexMain' // –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —à–µ–π–¥–µ—Ä–µ
                },
                
                // Fragment stage - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∏–∫—Å–µ–ª–∏
                fragment: {
                    module: shaderModule,
                    entryPoint: 'fragmentMain',
                    targets: [{
                        format: this.gpu.preferredFormat,
                        // –í–∫–ª—é—á–∞–µ–º –±–ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
                        blend: {
                            color: {
                                srcFactor: 'src-alpha',
                                dstFactor: 'one-minus-src-alpha',
                                operation: 'add'
                            },
                            alpha: {
                                srcFactor: 'one',
                                dstFactor: 'one-minus-src-alpha',
                                operation: 'add'
                            }
                        }
                    }]
                },
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ —Ä–∏—Å–æ–≤–∞—Ç—å –ø—Ä–∏–º–∏—Ç–∏–≤—ã
                primitive: {
                    topology: 'triangle-list', // –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏
                    cullMode: 'none' // –ù–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–Ω–∏–µ –≥—Ä–∞–Ω–∏
                }
            });
            
            // –°–æ–∑–¥–∞—ë–º bind group - —Å–≤—è–∑—ã–≤–∞–µ—Ç uniform buffer —Å —à–µ–π–¥–µ—Ä–æ–º
            // –≠—Ç–æ –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫ –≤—Ö–æ–¥–∞–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
            this.bindGroup = this.gpu.device.createBindGroup({
                label: 'Background Bind Group',
                layout: this.renderPipeline.getBindGroupLayout(0),
                entries: [{
                    binding: 0, // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç @binding(0) –≤ —à–µ–π–¥–µ—Ä–µ
                    resource: {
                        buffer: this.uniformBuffer
                    }
                }]
            });
            
            this.initialized = true;
            console.log('‚úì Procedural Background initialized');
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Procedural Background:', error);
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ —à–µ–π–¥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞.
     * 
     * –≠—Ç–æ WGSL –∫–æ–¥ - —è–∑—ã–∫ —à–µ–π–¥–µ—Ä–æ–≤ –¥–ª—è WebGPU. –û–Ω –ø–æ—Ö–æ–∂ –Ω–∞ C, –Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
     * —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ GPU. –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
     * —Ç—ã—Å—è—á–∏ —Ä–∞–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ - –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è –∏–ª–∏ –≤–µ—Ä—à–∏–Ω—ã.
     */
    getShaderCode() {
        return `
            // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è uniform-–¥–∞–Ω–Ω—ã—Ö (–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã –¥–ª—è –≤—Å–µ—Ö –ø–∏–∫—Å–µ–ª–µ–π)
            struct Uniforms {
                time: f32,          // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                mouseX: f32,        // –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ X (0-1)
                mouseY: f32,        // –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ Y (0-1)
                clickX: f32,        // –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞ X
                clickY: f32,        // –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞ Y
                waveIntensity: f32, // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–æ–ª–Ω—ã –æ—Ç –∫–ª–∏–∫–∞
                colorShift: f32,    // –°–¥–≤–∏–≥ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
                padding: f32        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–æ 16 –±–∞–π—Ç
            };
            
            // –î–µ–∫–ª–∞—Ä–∏—Ä—É–µ–º uniform buffer, –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤ —à–µ–π–¥–µ—Ä–µ
            @group(0) @binding(0) var<uniform> uniforms: Uniforms;
            
            // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –æ—Ç vertex –∫ fragment shader
            struct VertexOutput {
                @builtin(position) position: vec4<f32>,  // –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                @location(0) uv: vec2<f32>               // UV-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (0-1)
            };
            
            /**
             * Vertex Shader - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã
             * 
             * –ú—ã —Ä–∏—Å—É–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (–∫–≤–∞–¥) –∏–∑ –¥–≤—É—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.
             * –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
             * 
             * @param vertex_index - –∏–Ω–¥–µ–∫—Å –≤–µ—Ä—à–∏–Ω—ã (0-5 –¥–ª—è –¥–≤—É—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤)
             * @return VertexOutput —Å –ø–æ–∑–∏—Ü–∏–µ–π –∏ UV-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
             */
            @vertex
            fn vertexMain(@builtin(vertex_index) vertexIndex: u32) -> VertexOutput {
                var output: VertexOutput;
                
                // –°–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –∫–≤–∞–¥–∞
                // –î–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω –æ—Ç -1 –¥–æ 1
                let pos = array<vec2<f32>, 6>(
                    vec2<f32>(-1.0, -1.0),  // –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
                    vec2<f32>( 1.0, -1.0),  // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
                    vec2<f32>(-1.0,  1.0),  // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
                    vec2<f32>(-1.0,  1.0),  // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π (–≤—Ç–æ—Ä–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫)
                    vec2<f32>( 1.0, -1.0),  // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
                    vec2<f32>( 1.0,  1.0)   // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
                );
                
                let p = pos[vertexIndex];
                output.position = vec4<f32>(p, 0.0, 1.0);
                
                // UV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç 0 –¥–æ 1
                output.uv = (p + 1.0) * 0.5;
                
                return output;
            }
            
            /**
             * –ü—Ä–æ—Å—Ç–∞—è hash-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.
             * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à—É–º–∞ –∏ –≤–∞—Ä–∏–∞—Ü–∏–π.
             */
            fn hash(p: vec2<f32>) -> f32 {
                let h = dot(p, vec2<f32>(127.1, 311.7));
                return fract(sin(h) * 43758.5453123);
            }
            
            /**
             * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–≤–Ω—ã–π —à—É–º (noise) –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.
             * –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ –¥–ª—è –º–Ω–æ–≥–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
             */
            fn noise(p: vec2<f32>) -> f32 {
                let i = floor(p);
                let f = fract(p);
                
                // –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è (smoothstep)
                let u = f * f * (3.0 - 2.0 * f);
                
                // –ë–∏–ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —É–≥–ª–∞–º–∏ —è—á–µ–π–∫–∏
                return mix(
                    mix(hash(i + vec2<f32>(0.0, 0.0)), 
                        hash(i + vec2<f32>(1.0, 0.0)), u.x),
                    mix(hash(i + vec2<f32>(0.0, 1.0)), 
                        hash(i + vec2<f32>(1.0, 1.0)), u.x),
                    u.y
                );
            }
            
            /**
             * Fragment Shader - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
             * 
             * –≠—Ç–æ —Å–µ—Ä–¥—Ü–µ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ú—ã –≤—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞–∂–¥–æ–≥–æ
             * –ø–∏–∫—Å–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏, –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
             * 
             * @param input - –¥–∞–Ω–Ω—ã–µ –æ—Ç vertex shader
             * @return —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA
             */
            @fragment
            fn fragmentMain(input: VertexOutput) -> @location(0) vec4<f32> {
                let uv = input.uv;
                
                // –ë–∞–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π macOS —Ñ–æ–Ω
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º UV-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                let gradientColor1 = vec3<f32>(0.65, 0.16, 0.96); // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                let gradientColor2 = vec3<f32>(0.34, 0.14, 0.84); // –¢—ë–º–Ω–æ-—Å–∏–Ω–∏–π
                let gradientColor3 = vec3<f32>(0.04, 0.15, 0.46); // –ì–ª—É–±–æ–∫–∏–π —Å–∏–Ω–∏–π
                let gradientColor4 = vec3<f32>(0.11, 0.44, 0.61); // –¶–∏–∞–Ω
                
                // –°–æ–∑–¥–∞—ë–º –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UV-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                var baseColor = mix(
                    mix(gradientColor1, gradientColor2, uv.x),
                    mix(gradientColor3, gradientColor4, uv.x),
                    uv.y
                );
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à—É–º –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏
                let noiseScale = 3.0;
                let noiseSpeed = 0.3;
                let noiseValue = noise(uv * noiseScale + uniforms.time * noiseSpeed);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —à—É–º –∫ —Ü–≤–µ—Ç—É
                baseColor += vec3<f32>(noiseValue * 0.05);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã –æ—Ç –∫–ª–∏–∫–∞
                if (uniforms.waveIntensity > 0.01) {
                    // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
                    let clickPos = vec2<f32>(uniforms.clickX, uniforms.clickY);
                    let dist = distance(uv, clickPos);
                    
                    // –í–æ–ª–Ω–∞ —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è –æ—Ç —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
                    let wavePhase = dist * 10.0 - uniforms.time * 5.0;
                    let wave = sin(wavePhase) * 0.5 + 0.5;
                    
                    // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –≤–æ–ª–Ω—ã —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
                    let attenuation = exp(-dist * 3.0) * uniforms.waveIntensity;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ª–Ω—É –∫ —Ü–≤–µ—Ç—É
                    baseColor += vec3<f32>(wave * attenuation * 0.3);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –∫—É—Ä—Å–æ—Ä–∞
                let mousePos = vec2<f32>(uniforms.mouseX, uniforms.mouseY);
                let mouseDist = distance(uv, mousePos);
                let mouseGlow = exp(-mouseDist * 8.0) * 0.2;
                baseColor += vec3<f32>(mouseGlow);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π —Å–¥–≤–∏–≥ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                baseColor = mix(
                    baseColor,
                    baseColor.zxy, // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ RGB –∫–∞–Ω–∞–ª–æ–≤
                    sin(uniforms.colorShift * 0.5) * 0.5 + 0.5
                );
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç —Å –ø–æ–ª–Ω–æ–π –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                return vec4<f32>(baseColor, 1.0);
            }
        `;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º.
     * 
     * @param {number} deltaTime - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    update(deltaTime) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.params.time += deltaTime;
        
        // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ–ª–Ω—ã
        this.params.waveIntensity *= 0.95;
        
        // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Å–¥–≤–∏–≥–∞
        this.params.colorShift += deltaTime * 0.5;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ uniform buffer
        // –≠—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JavaScript –≤ GPU-–ø–∞–º—è—Ç—å
        const uniformData = new Float32Array([
            this.params.time,
            this.params.mouseX,
            this.params.mouseY,
            this.params.clickX,
            this.params.clickY,
            this.params.waveIntensity,
            this.params.colorShift,
            0 // padding
        ]);
        
        // writeBuffer - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±–Ω–æ–≤–∏—Ç—å –±—É—Ñ–µ—Ä
        // –≠—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è
        this.gpu.device.queue.writeBuffer(
            this.uniformBuffer,
            0,
            uniformData.buffer,
            uniformData.byteOffset,
            uniformData.byteLength
        );
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
     * 
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     */
    onMouseMove(x, y) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç 0 –¥–æ 1
        this.params.mouseX = x / this.gpu.canvas.width;
        this.params.mouseY = 1.0 - (y / this.gpu.canvas.height); // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ª–Ω–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.
     * 
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     */
    onClick(x, y) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–ª–∏–∫–∞
        this.params.clickX = x / this.gpu.canvas.width;
        this.params.clickY = 1.0 - (y / this.gpu.canvas.height);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ–ª–Ω—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é
        this.params.waveIntensity = 1.0;
        
        console.log(`üåä Wave triggered at (${this.params.clickX.toFixed(2)}, ${this.params.clickY.toFixed(2)})`);
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π —Ñ–æ–Ω.
     * 
     * @param {GPUCommandEncoder} encoder - Command encoder —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
     */
    render(encoder) {
        if (!this.initialized) return;
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º GPU-–æ–ø–µ—Ä–∞—Ü–∏—é –≤ MicroISA –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        if (this.vm) {
            this.vm.executeInstruction(
                window.MicroISA.InstructionType.PAINT,
                { operation: 'procedural_background' }
            );
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–∫—Å—Ç—É—Ä—É canvas –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        const textureView = this.gpu.context.getCurrentTexture().createView();
        
        // –ù–∞—á–∏–Ω–∞–µ–º render pass
        // Render pass - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        const renderPass = encoder.beginRenderPass({
            label: 'Background Render Pass',
            colorAttachments: [{
                view: textureView,
                // loadOp –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                // 'clear' –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—É –∑–∞–¥–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                clearValue: { r: 0, g: 0, b: 0, a: 1 },
                loadOp: 'clear',
                // storeOp –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                // 'store' —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç—É—Ä—É
                storeOp: 'store'
            }]
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        renderPass.setPipeline(this.renderPipeline);
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º uniform buffer
        renderPass.setBindGroup(0, this.bindGroup);
        
        // –†–∏—Å—É–µ–º 6 –≤–µ—Ä—à–∏–Ω (–¥–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –∫–≤–∞–¥–∞)
        renderPass.draw(6, 1, 0, 0);
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º render pass
        renderPass.end();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.gpu.stats.totalRenderPasses++;
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
 */
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        WebGPUContext,
        ProceduralBackground
    };
}

// –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
    window.WebGPURenderEngine = {
        WebGPUContext,
        ProceduralBackground
    };
}
