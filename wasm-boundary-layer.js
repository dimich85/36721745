/**
 * ============================================================================
 * JAVASCRIPT BOUNDARY LAYER - STAGE 4 REVOLUTION
 * ============================================================================
 * 
 * –≠—Ç–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã. –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã
 * JavaScript —Å–æ–¥–µ—Ä–∂–∞–ª –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É, –æ–Ω —Ç–µ–ø–µ—Ä—å —Å–ª—É–∂–∏—Ç –ª–∏—à—å —Ç–æ–Ω–∫–æ–π –æ–±–æ–ª–æ—á–∫–æ–π -
 * –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –º–µ–∂–¥—É –º–∏—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–∞ (DOM, —Å–æ–±—ã—Ç–∏—è, Web APIs) –∏ –º–∏—Ä–æ–º WASM,
 * –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Å—è –Ω–∞—Å—Ç–æ—è—â–∞—è —Ä–∞–±–æ—Ç–∞.
 * 
 * –§–ò–õ–û–°–û–§–ò–Ø –î–ò–ó–ê–ô–ù–ê:
 * 
 * –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ –∫–∞–∫ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ. JavaScript - —ç—Ç–æ
 * –ø–æ—Å–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞ —è–∑—ã–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã WASM
 * –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞. –ü–æ—Å–æ–ª –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–π –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ - –æ–Ω —Ç–æ–ª—å–∫–æ
 * –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É–¥–∞-—Å—é–¥–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç, —á—Ç–æ–±—ã –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–Ω–∏–º–∞–ª–∏
 * –¥—Ä—É–≥ –¥—Ä—É–≥–∞.
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ù–¶–ò–ü–´:
 * 
 * 1. –ú–ò–ù–ò–ú–ê–õ–ò–ó–ú: –≠—Ç–æ—Ç —Å–ª–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ–Ω–∫–∏–º. –ö–∞–∂–¥–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è
 *    —Å—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç
 *    –≤—ã–≥–æ–¥—ã –æ—Ç WASM –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π.
 * 
 * 2. ZERO BUSINESS LOGIC: –ù–∏–∫–∞–∫–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –≤ —ç—Ç–æ–º —Å–ª–æ–µ. –¢–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
 *    –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—É.
 * 
 * 3. –≠–§–§–ï–ö–¢–ò–í–ù–ê–Ø –ì–†–ê–ù–ò–¶–ê: –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≥—Ä–∞–Ω–∏—Ü—ã JavaScript-WASM.
 *    –õ—É—á—à–µ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ —Å –±–∞—Ç—á–µ–º –¥–∞–Ω–Ω—ã—Ö, —á–µ–º –º–Ω–æ–≥–æ –≤—ã–∑–æ–≤–æ–≤ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
 * 
 * 4. –¢–ò–ü–û–í–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ. –ï—Å–ª–∏ WASM –æ–∂–∏–¥–∞–µ—Ç
 *    int32, –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º –∏–º–µ–Ω–Ω–æ int32, –Ω–µ –ø–æ–ª–∞–≥–∞—è—Å—å –Ω–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ.
 */

/**
 * WABridge (WebAssembly Bridge) - –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Å–ª–æ—è.
 * 
 * –≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É JavaScript –º–∏—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–∞ –∏
 * WASM –º–∏—Ä–æ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏. –í—Å–µ –≤—ã–∑–æ–≤—ã –≤ WASM –∏–¥—É—Ç —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å,
 * –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ WASM –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å.
 */
class WABridge {
    constructor() {
        // –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π WASM –º–æ–¥—É–ª—å
        this.wasmModule = null;
        
        // –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ WASM
        this.wasmExports = null;
        
        // –ü–∞–º—è—Ç—å WASM –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
        this.wasmMemory = null;
        
        // –≠–Ω–∫–æ–¥–µ—Ä—ã/–¥–µ–∫–æ–¥–µ—Ä—ã –¥–ª—è —Å—Ç—Ä–æ–∫
        this.textEncoder = new TextEncoder();
        this.textDecoder = new TextDecoder();
        
        // –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        this.stats = {
            totalCalls: 0,           // –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤ –≤ WASM
            totalBoundaryCrossings: 0, // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≥—Ä–∞–Ω–∏—Ü—ã
            averageCallTime: 0,      // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞
            memoryUsed: 0            // –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è WASM –ø–∞–º—è—Ç—å
        };
        
        // –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        this.sharedDataBuffers = new Map();
        
        console.log('üåâ WABridge initialized - JavaScript ‚Üî WASM boundary layer');
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç WASM –º–æ–¥—É–ª—å.
     * 
     * –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞. –ú—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–π—Ç–∫–æ–¥ WASM, –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º
     * –µ–≥–æ –≤ –º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–∑–æ–≤–∞
     * —Ñ—É–Ω–∫—Ü–∏–π. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
     * 
     * @param {string} wasmPath - –ü—É—Ç—å –∫ .wasm —Ñ–∞–π–ª—É
     * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
     */
    async loadWASM(wasmPath) {
        console.log('üì¶ Loading WASM module from:', wasmPath);
        const startTime = performance.now();
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–π—Ç–∫–æ–¥ WASM
            const response = await fetch(wasmPath);
            const wasmBytes = await response.arrayBuffer();
            
            console.log(`  WASM size: ${(wasmBytes.byteLength / 1024).toFixed(2)} KB`);
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã - —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ WASM –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å
            const imports = this.prepareImports();
            
            // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä—É–µ–º WASM –º–æ–¥—É–ª—å
            const wasmModule = await WebAssembly.instantiate(wasmBytes, imports);
            
            this.wasmModule = wasmModule;
            this.wasmExports = wasmModule.instance.exports;
            this.wasmMemory = this.wasmExports.memory;
            
            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WASM –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if (this.wasmExports.initialize) {
                this.wasmExports.initialize();
            }
            
            const loadTime = performance.now() - startTime;
            console.log(`‚úì WASM module loaded and compiled in ${loadTime.toFixed(2)}ms`);
            console.log('  Exported functions:', Object.keys(this.wasmExports).length);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Failed to load WASM module:', error);
            return false;
        }
    }
    
    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã - —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ WASM –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ JavaScript.
     * 
     * WASM –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å DOM –∏–ª–∏ Web APIs. –ö–æ–≥–¥–∞ WASM –Ω—É–∂–Ω–æ
     * —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é
     * –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å. –≠—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã.
     * 
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –¥–ª—è WASM
     */
    prepareImports() {
        const self = this;
        
        return {
            env: {
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ WASM –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
                // –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ WASM –∫–æ–¥–∞
                log: (ptr, len) => {
                    const message = self.readString(ptr, len);
                    console.log('[WASM]', message);
                },
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ DOM –∏–∑ WASM
                // WASM –ø–µ—Ä–µ–¥–∞—ë—Ç ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                updateDOM: (elementIdPtr, elementIdLen, contentPtr, contentLen) => {
                    const elementId = self.readString(elementIdPtr, elementIdLen);
                    const content = self.readString(contentPtr, contentLen);
                    
                    const element = document.getElementById(elementId);
                    if (element) {
                        element.textContent = content;
                    }
                    
                    self.stats.totalBoundaryCrossings++;
                },
                
                // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è WASM
                // WASM –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø—Ä—è–º—É—é
                getCurrentTime: () => {
                    return performance.now();
                },
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
                // WASM –Ω—É–∂–Ω–∞ —ç–Ω—Ç—Ä–æ–ø–∏—è –∏–∑–≤–Ω–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                random: () => {
                    return Math.random();
                },
                
                // –ê–ª–ª–æ–∫–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –≤ JavaScript –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                // –ò–Ω–æ–≥–¥–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Ö—Ä–∞–Ω–∏—Ç—å –±–æ–ª—å—à–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ JS, –∞ –≤ WASM
                // –¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏
                jsAlloc: (size) => {
                    const buffer = new ArrayBuffer(size);
                    const id = self.sharedDataBuffers.size;
                    self.sharedDataBuffers.set(id, buffer);
                    return id;
                },
                
                // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —á–µ—Ä–µ–∑ jsAlloc
                jsFree: (id) => {
                    self.sharedDataBuffers.delete(id);
                }
            }
        };
    }
    
    /**
     * –ß–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ WASM –ø–∞–º—è—Ç–∏.
     * 
     * –°—Ç—Ä–æ–∫–∏ –≤ WASM –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–π—Ç –≤ –ª–∏–Ω–µ–π–Ω–æ–π –ø–∞–º—è—Ç–∏.
     * –ú—ã –ø–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å (–∞–¥—Ä–µ—Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏) –∏ –¥–ª–∏–Ω—É, –∏ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å
     * —ç—Ç–∏ –±–∞–π—Ç—ã –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ JavaScript —Å—Ç—Ä–æ–∫—É.
     * 
     * @param {number} ptr - –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –≤ WASM –ø–∞–º—è—Ç–∏
     * @param {number} len - –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç–∞—Ö
     * @returns {string} - –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    readString(ptr, len) {
        const bytes = new Uint8Array(this.wasmMemory.buffer, ptr, len);
        return this.textDecoder.decode(bytes);
    }
    
    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ WASM –ø–∞–º—è—Ç—å.
     * 
     * –û–±—Ä–∞—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - –º—ã –∫–æ–¥–∏—Ä—É–µ–º JavaScript —Å—Ç—Ä–æ–∫—É –≤ UTF-8 –±–∞–π—Ç—ã –∏
     * –∫–æ–ø–∏—Ä—É–µ–º –∏—Ö –≤ WASM –ø–∞–º—è—Ç—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.
     * 
     * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
     * @param {number} ptr - –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–æ –≤ WASM –ø–∞–º—è—Ç–∏
     * @returns {number} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –±–∞–π—Ç
     */
    writeString(str, ptr) {
        const encoded = this.textEncoder.encode(str);
        const memory = new Uint8Array(this.wasmMemory.buffer);
        memory.set(encoded, ptr);
        return encoded.length;
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç WASM —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π.
     * 
     * –≠—Ç–æ –æ–±—ë—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ WASM —Ñ—É–Ω–∫—Ü–∏–π. –ú—ã –∏–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
     * –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏.
     * –≠—Ç–æ –¥–∞—ë—Ç –Ω–∞–º –ø–æ–ª–Ω—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ —Ç–æ, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞
     * WASM –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
     * 
     * @param {string} funcName - –ò–º—è WASM —Ñ—É–Ω–∫—Ü–∏–∏
     * @param {...any} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
     * @returns {any} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
     */
    call(funcName, ...args) {
        if (!this.wasmExports[funcName]) {
            console.error(`WASM function '${funcName}' not found`);
            return null;
        }
        
        const startTime = performance.now();
        
        try {
            // –í—ã–∑—ã–≤–∞–µ–º WASM —Ñ—É–Ω–∫—Ü–∏—é
            const result = this.wasmExports[funcName](...args);
            
            const callTime = performance.now() - startTime;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.stats.totalCalls++;
            this.stats.totalBoundaryCrossings++;
            
            if (this.stats.averageCallTime === 0) {
                this.stats.averageCallTime = callTime;
            } else {
                // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
                this.stats.averageCallTime = 
                    (this.stats.averageCallTime * 0.9) + (callTime * 0.1);
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if (callTime > 10) {
                console.warn(`‚ö†Ô∏è Slow WASM call: ${funcName} took ${callTime.toFixed(2)}ms`);
            }
            
            return result;
            
        } catch (error) {
            console.error(`Error calling WASM function '${funcName}':`, error);
            return null;
        }
    }
    
    /**
     * –ß–∏—Ç–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –∏–∑ WASM –ø–∞–º—è—Ç–∏.
     * 
     * –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É JavaScript –∏ WASM
     * –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ø–∞–º—è—Ç–∏ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É.
     * 
     * @param {number} ptr - –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     * @param {string} type - –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ('i32', 'f32', 'f64')
     * @returns {TypedArray} - JavaScript typed array —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    readArray(ptr, count, type = 'i32') {
        const TypedArrayClass = {
            'i32': Int32Array,
            'f32': Float32Array,
            'f64': Float64Array,
            'u8': Uint8Array
        }[type];
        
        return new TypedArrayClass(this.wasmMemory.buffer, ptr, count);
    }
    
    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –≤ WASM –ø–∞–º—è—Ç—å.
     * 
     * @param {TypedArray} array - –ú–∞—Å—Å–∏–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏
     * @param {number} ptr - –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–æ –≤ WASM –ø–∞–º—è—Ç–∏
     */
    writeArray(array, ptr) {
        const memory = new Uint8Array(this.wasmMemory.buffer);
        const bytes = new Uint8Array(array.buffer);
        memory.set(bytes, ptr);
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Å–ª–æ—è.
     * 
     * –≠—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É.
     * –ï—Å–ª–∏ –º—ã –≤–∏–¥–∏–º, —á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ, —ç—Ç–æ –º–æ–∂–µ—Ç
     * —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –Ω–∞–¥
     * –ø–æ–ª–µ–∑–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π.
     * 
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    getStats() {
        return {
            ...this.stats,
            memoryPages: this.wasmMemory ? 
                this.wasmMemory.buffer.byteLength / 65536 : 0,
            memoryMB: this.wasmMemory ? 
                (this.wasmMemory.buffer.byteLength / 1024 / 1024).toFixed(2) : 0
        };
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å.
     */
    destroy() {
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é cleanup –≤ WASM, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (this.wasmExports && this.wasmExports.cleanup) {
            this.wasmExports.cleanup();
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
        this.wasmModule = null;
        this.wasmExports = null;
        this.wasmMemory = null;
        this.sharedDataBuffers.clear();
        
        console.log('‚úì WABridge destroyed');
    }
}

/**
 * ============================================================================
 * DOM EVENT ADAPTER
 * ============================================================================
 * 
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è DOM –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ WASM. –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 * —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–≤–æ–π—Å—Ç–≤, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ
 * –Ω—É–∂–Ω—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏. –ú—ã –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–¥–∞—ë–º
 * –∏—Ö –≤ WASM –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ.
 */
class DOMEventAdapter {
    constructor(waBridge) {
        this.bridge = waBridge;
        
        // –ú–∞–ø–ø–∏–Ω–≥ DOM —Å–æ–±—ã—Ç–∏–π –Ω–∞ WASM —Ñ—É–Ω–∫—Ü–∏–∏
        this.eventHandlers = new Map();
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ DOM —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç WASM —Ñ—É–Ω–∫—Ü–∏—é.
     * 
     * @param {string} elementId - ID —ç–ª–µ–º–µ–Ω—Ç–∞ DOM
     * @param {string} eventType - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ('click', 'input', –∏ —Ç.–¥.)
     * @param {string} wasmFunction - –ò–º—è WASM —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞
     */
    registerHandler(elementId, eventType, wasmFunction) {
        const element = document.getElementById(elementId);
        
        if (!element) {
            console.warn(`Element '${elementId}' not found`);
            return;
        }
        
        const handler = (event) => {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            const eventData = this.extractEventData(event);
            
            // –ü–µ—Ä–µ–¥–∞—ë–º –≤ WASM
            // –ó–¥–µ—Å—å –º—ã —É–ø—Ä–æ—â–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
            // –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            this.bridge.call(wasmFunction, 
                eventData.x || 0, 
                eventData.y || 0,
                eventData.value || 0
            );
        };
        
        element.addEventListener(eventType, handler);
        this.eventHandlers.set(`${elementId}:${eventType}`, handler);
        
        console.log(`‚úì Registered ${eventType} on ${elementId} -> ${wasmFunction}`);
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.
     * 
     * @param {Event} event - DOM —Å–æ–±—ã—Ç–∏–µ
     * @returns {Object} - –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    extractEventData(event) {
        const data = {};
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
        if (event.clientX !== undefined) {
            data.x = event.clientX;
            data.y = event.clientY;
        }
        
        // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –≤–≤–æ–¥–∞
        if (event.target && event.target.value !== undefined) {
            data.value = event.target.value;
        }
        
        // –ö–æ–¥ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if (event.key) {
            data.key = event.key;
        }
        
        return data;
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
     */
    cleanup() {
        for (const [key, handler] of this.eventHandlers) {
            const [elementId, eventType] = key.split(':');
            const element = document.getElementById(elementId);
            if (element) {
                element.removeEventListener(eventType, handler);
            }
        }
        this.eventHandlers.clear();
    }
}

/**
 * ============================================================================
 * RENDER ADAPTER
 * ============================================================================
 * 
 * WASM –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å DOM. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç
 * –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI, –∞ —ç—Ç–æ—Ç –∞–¥–∞–ø—Ç–µ—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
 * –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É DOM. –≠—Ç–æ –∫–∞–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π DOM, –Ω–æ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∏–∑ WASM.
 */
class RenderAdapter {
    constructor(waBridge) {
        this.bridge = waBridge;
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ç—á –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π DOM –∏–∑ WASM.
     * 
     * –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã WASM –≤—ã–∑—ã–≤–∞–ª –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–µ–ª–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π DOM,
     * –º—ã —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞—Ç—á –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π.
     * –≠—Ç–æ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç reflow/repaint –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã.
     * 
     * @param {number} updatesPtr - –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ WASM –ø–∞–º—è—Ç–∏
     * @param {number} updateCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    applyUpdates(updatesPtr, updateCount) {
        // –ß–∏—Ç–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ WASM –ø–∞–º—è—Ç–∏
        // –ö–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: [type, elementId, data...]
        const updates = this.bridge.readArray(updatesPtr, updateCount * 3, 'i32');
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        for (let i = 0; i < updateCount; i++) {
            const offset = i * 3;
            const type = updates[offset];
            const elementId = updates[offset + 1];
            const data = updates[offset + 2];
            
            this.applyUpdate(type, elementId, data);
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM.
     * 
     * @param {number} type - –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (0=setText, 1=setStyle, –∏ —Ç.–¥.)
     * @param {number} elementId - ID —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {number} data - –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    applyUpdate(type, elementId, data) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WASM
        // –≠—Ç–æ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        console.log(`Applying update type ${type} to element ${elementId}`);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        WABridge,
        DOMEventAdapter,
        RenderAdapter
    };
}

if (typeof window !== 'undefined') {
    window.WASMBoundary = {
        WABridge,
        DOMEventAdapter,
        RenderAdapter
    };
}
